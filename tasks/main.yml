---
- name: Make sure required variables are defined
  ansible.builtin.assert:
    that:
      - "lookup('ansible.builtin.env', 'SQL_SA_PASSWORD', default=sql_sa_password) is defined"

- name: Get all local SQL users
  ansible.builtin.set_fact:
    local_sql_users: "{{ local_sql_users | default([]) + [user.1] }}"
  when: user.1 not in local_sql_users | default([]) and '\\' not in user.1
  loop: "{{ query('ansible.builtin.subelements', sql_databases, 'users', {'skip_missing': True}) }}"
  # loop: "{{ sql_databases | subelements('users') }}"
  loop_control:
    loop_var: user

- name: Get all domain SQL users
  ansible.builtin.set_fact:
    domain_sql_users: "{{ domain_sql_users | default([]) + [user.1] }}"
  when: user.1 not in domain_sql_users | default([]) and '\\' in user.1
  loop: "{{ query('ansible.builtin.subelements', sql_databases, 'users', {'skip_missing': True}) }}"
  loop_control:
    loop_var: user

- name: Make sure password is defined for all SQL users
  ansible.builtin.assert:
    that:
      - "lookup('ansible.builtin.env', user_env_var, default=user.password) is defined"
    fail_msg: "Neither {{ user_env_var }} nor a password attribute is defined for {{ user }}"
  loop: "{{ local_sql_users | default([]) }}"
  vars:
    user_env_var: "SQL_{{ user | upper }}_PASSWORD"
  loop_control:
    loop_var: user

- name: Query all defined local users
  ansible.windows.win_user:
    name: "{{ local_user }}"
    state: query
  when: local_user[0] == '.'
  loop: "{{ dsc_sqlsysadminaccounts }}"
  loop_control:
    loop_var: local_user
  register: local_users

- name: Make sure all defined local users exist
  ansible.builtin.assert:
    that:
      - local_user.state != 'absent'
    fail_msg: "{{ local_user.local_user }} does not exist on {{ inventory_hostname }}"
    quiet: true
  when: local_user.local_user[0] == '.'
  loop: "{{ local_users.results }}"
  loop_control:
    loop_var: local_user

- name: Determine if the default instance exists.
  ansible.windows.win_service:
    name: "{{ dsc_instancename }}"
  register: service_info

- name: End play if default instance already exists.
  when: service_info.exists
  ansible.builtin.meta: end_play

# - name: End play
#   ansible.builtin.meta: end_play

- name: Begin SQL Install Task
  when: not service_info.exists
  block:
    # Load required powershell modules
    - name: Check for SQLServer DSC Powershell module
      community.windows.win_psmodule:
        name: "{{ item }}"
        accept_license: true
        state: present
      with_items: "{{ mssql_psmodules }}"

    - name: Install Windows feature
      ansible.windows.win_feature:
        name: "{{ item }}"
        state: present
      tags: install_mssql
      with_items:
        - NET-Framework-Core
        - NET-Framework-Features
        - NET-Framework-45-Features
        - WAS

    # - name: Ensure that a reboot is not pending
    #   when: ansible_reboot_pending and not mssql_custom_installation_media
    #   ansible.builtin.debug:
    #     msg: 'Pending reboot detected'
    #   changed_when: false
    #   notify: reboot windows

    # - name: Set Windows power plan to high performance
    #   community.windows.win_power_plan:
    #     name: high performance

    - name: Create temp folder on target
      ansible.windows.win_file:
        path: "{{ sql_install_files_path }}"
        state: directory

    - name: Copy SMSS install file via HTTP
      ansible.windows.win_get_url:
        url: "{{ smss_install_source_dir }}/{{ smss_install_file }}"
        dest: "{{ sql_install_files_path }}\\{{ smss_install_file }}"
        force: false
      when: smss_install_source_dir is ansible.builtin.uri(schemes=['http', 'https'])

    - name: Copy SMSS install file from Ansible server
      ansible.windows.win_copy:
        src: "{{ playbook_dir }}/{{ smss_install_source_dir }}/{{ smss_install_file }}"
        dest: "{{ sql_install_files_path }}\\{{ smss_install_file }}"
        force: false
      when: smss_install_source_dir is not ansible.builtin.uri(schemes=['http', 'https'])

    - name: Copy SQL install ISO via HTTP
      ansible.windows.win_get_url:
        url: "{{ sql_install_source_dir }}/{{ sql_install_iso }}"
        dest: "{{ sql_install_files_path }}\\{{ sql_install_iso }}"
        force: false
      when: sql_install_source_dir is ansible.builtin.uri(schemes=['http', 'https'])

    - name: Copy SQL install ISO from Ansible server
      ansible.windows.win_copy:
        src: "{{ playbook_dir }}/{{ sql_install_source_dir }}/{{ sql_install_iso }}"
        dest: "{{ sql_install_files_path }}\\{{ sql_install_iso }}"
        force: false
      when: sql_install_source_dir is not ansible.builtin.uri(schemes=['http', 'https'])

    - name: Mount ISO if SQL install is an ISO file
      when: sql_install_iso.split('.')[-1] | lower == 'iso'
      block:
        - name: Mount ISO
          community.windows.win_disk_image:
            image_path: "{{ sql_install_files_path }}\\{{ sql_install_iso }}"
            state: present
          register: disk_image_out

        - name: Debug disk_image_out
          ansible.builtin.debug:
            var: disk_image_out.mount_paths[0]

        - name: Set SQL install source path
          ansible.builtin.set_fact:
            sql_install_source_path: "{{ disk_image_out.mount_paths[0] }}"

    - name: Extract SQL install source path when not an ISO
      when: sql_install_iso.split('.')[-1] | lower != 'iso'
      block:
        - name: Set SQL install source path when not an ISO
          ansible.builtin.set_fact:
            sql_install_source_path: "{{ sql_install_files_path }}\\{{ sql_install_iso.split('.')[:-1] | join('.') }}"
          when: sql_install_iso.split('.')[-1] | lower != 'iso'

        - name: Extract SQL install
          ansible.windows.win_command:
            cmd: "{{ sql_install_files_path }}\\{{ sql_install_iso }} /q /x:{{ sql_install_source_path }}"

    # https://github.com/dsccommunity/SqlServerDsc/wiki/SqlSetup
    - name: Install SQL Server
      ansible.windows.win_dsc:
        resource_name: SQLSetup
        Action: "{{ dsc_action }}"
        InstanceName: "{{ dsc_instancename }}"
        Features: "{{ dsc_features }}"
        SourcePath: "{{ sql_install_source_path }}"
        SQLSysAdminAccounts: "{{ dsc_sqlsysadminaccounts | default(omit) }}"
        InstallSQLDataDir: "{{ dsc_installsqldatadir | default(omit) }}"
        SQLUserDBDir: "{{ dsc_sqluserdbdir | default(omit) }}"
        SQLUserDBLogDir: "{{ dsc_sqluserdblogdir | default(omit) }}"
        SQLTempDBDir: "{{ dsc_sqltempdbdir | default(omit) }}"
        SQLTempDBLogDir: "{{ dsc_sqltempdblogdir | default(omit) }}"
        SQLBackupDir: "{{ dsc_sqlbackupdir | default(omit) }}"
        SecurityMode: "{{ dsc_securitymode }}"
        SAPwd_username: sa
        SAPwd_password: "{{ lookup('ansible.builtin.env', 'SQL_SA_PASSWORD', default=sql_sa_password) }}"
        TcpEnabled: true
#        AgtSvcAccount_username: "{{ dsc_agtsvcaccount | default(omit) }}"
#        AgtSvcAccount_password: "{{ lookup('ansible.builtin.env', 'LOCAL_ADMIN_PASSWORD', default=sql_sa_password) }}"
#        SQLSvcAccount_username: "{{ dsc_sqlsvcaccount | default(omit) }}"
#        SQLSvcAccount_password: "{{ lookup('ansible.builtin.env', 'LOCAL_ADMIN_PASSWORD', default=sql_sa_password) }}"
        # DependsOn = '[WindowsFeature]NetFramework45'
      register: install_out

    - name: Debug install
      ansible.builtin.debug:
        var: install_out

    - name: Unmount ISO
      when: sql_install_iso.split('.')[-1] | lower == 'iso'
      community.windows.win_disk_image:
        image_path: "{{ sql_install_files_path }}\\{{ sql_install_iso }}"
        state: absent

    # - name: Enable SQL Server TCP/IP Protocol
    #   ansible.windows.win_dsc:
    #     resource_name: SqlProtocol
    #     InstanceName: "{{ dsc_instancename }}"
    #     Enabled: true
    #     ProtocolName: TcpIp

    # - name: Configure SQL Server TCP/IP Protocol
    #   ansible.windows.win_dsc:
    #     resource_name: SqlProtocolTcpIP
    #     InstanceName: "{{ dsc_instancename }}"
    #     IpAddressGroup: "IPAll"
    #     TcpPort: "1433"

    - name: Firewall rule to allow SQL on TCP port 1433 and 1434
      community.windows.win_firewall_rule:
        name: Microsoft SQL Server
        localport: 1433-1434
        action: allow
        direction: in
        protocol: tcp
        state: present
        profile: domain,private,public
        enabled: true

    - name: Install SQL Server Management Studio
      when: install_smss
      ansible.windows.win_package:
        path: "{{ sql_install_files_path }}\\{{ smss_install_file }}"
        product_id: "{{ ssms_product_id }}"
        arguments: /install /passive /norestart

    - name: Create local users
      when: local_sql_users is defined and local_sql_users | length > 0
      ansible.windows.win_dsc:
        resource_name: SqlLogin
        Name: "{{ user }}"
        InstanceName: "{{ dsc_instancename }}"
        LoginType: SqlLogin
        LoginMustChangePassword: false
        LoginPasswordExpirationEnabled: false
        LoginPasswordPolicyEnforced: false
        LoginCredential_username: "{{ user }}"
        LoginCredential_password: "{{ lookup('ansible.builtin.env', user_env_var) }}"
      loop: "{{ local_sql_users | default([]) }}"
      vars:
        user_env_var: "SQL_{{ user | upper }}_PASSWORD"
      loop_control:
        loop_var: user

    - name: Create domain users
      when: domain_sql_users is defined and domain_sql_users | length > 0
      ansible.windows.win_dsc:
        resource_name: SqlLogin
        Name: "{{ user }}"
        InstanceName: "{{ dsc_instancename }}"
        LoginType: WindowsUser
      loop: "{{ domain_sql_users | default([]) }}"
      loop_control:
        loop_var: user

    - name: Configure SQL Databases
      when: sql_databases is defined
      block:
        - name: Create SQL Databases
          ansible.windows.win_dsc:
            resource_name: SQLDatabase
            Name: "{{ db.name }}"
            InstanceName: "{{ dsc_instancename }}"
            Collation: "{{ db.collation | default(omit) }}"
            CompatibilityLevel: "{{ db.compatibility_level | default(omit) }}"
            RecoveryModel: "{{ db.recovery_model | default('FULL') }}"
            OwnerName: "{{ db.owner_name | default(omit) }}"
          loop: "{{ sql_databases }}"
          loop_control:
            loop_var: db

        - name: Add Users to SQL Databases
          ansible.windows.win_dsc:
            resource_name: SqlDatabaseUser
            DatabaseName: "{{ db.0.name }}"
            InstanceName: "{{ dsc_instancename }}"
            Name: "{{ db.1 }}"
            UserType: Login
            LoginName: "{{ db.1 }}"
          loop: "{{ sql_databases | subelements('users') }}"
          loop_control:
            loop_var: db

        - name: Add Users to Roles on SQL Databases
          ansible.windows.win_dsc:
            resource_name: SqlDatabaseRole
            DatabaseName: "{{ db.0.name }}"
            InstanceName: "{{ dsc_instancename }}"
            Name: "{{ db.1.name }}"
            MembersToInclude: "{{ db.1.members }}"
            Ensure: Present
          loop: "{{ sql_databases | subelements('roles') }}"
          loop_control:
            loop_var: db

        - name: Configure SQL Database Files
          ansible.windows.win_dsc:
            resource_name: SqlScriptQuery
            Id: "ConfigureDatabaseFiles"
            InstanceName: "{{ dsc_instancename }}"
            Variable: "NAME={{ db.name }}, SIZE={{ db.db_size }}, MAXSIZE={{ db.db_max_size }}, FILEGROWTH={{ db.db_growth }}"
            Encrypt: Optional
            SetQuery: |
              USE [master]
              GO
              ALTER DATABASE $(NAME)
              MODIFY FILE
              (
                NAME = '$(NAME)',
                MAXSIZE = $(MAXSIZE),
                SIZE = $(SIZE),
                FILEGROWTH = $(FILEGROWTH)
              )
              GO
            GetQuery: |
              USE [master]
              GO
              SELECT * FROM sys.master_files
              WHERE type_desc = 'ROWS'
              AND name = '$(NAME)'
              GO
            TestQuery: |
              USE [master]
              GO
              if(SELECT COUNT(database_id) FROM sys.master_files
              WHERE type_desc = 'ROWS'
              AND name = '$(NAME)'
              AND size = 1024
              AND max_size = -1
              AND growth = 8192) = 0
              BEGIN
                PRINT 'Found default configuration'
              END
              ELSE
              BEGIN
                RAISERROR ('Default configuration has been modified', 16, 1)
              END
              GO
          loop: "{{ sql_databases }}"
          loop_control:
            loop_var: db

        - name: Configure Log Database Files
          ansible.windows.win_dsc:
            resource_name: SqlScriptQuery
            Id: "ConfigureLogFiles"
            InstanceName: "{{ dsc_instancename }}"
            Variable: "NAME={{ db.name }}, SIZE={{ db.log_size }}, MAXSIZE={{ db.log_max_size }}, FILEGROWTH={{ db.log_growth }}"
            Encrypt: Optional
            SetQuery: |
              USE [master]
              GO
              ALTER DATABASE $(NAME)
              MODIFY FILE
              (
                NAME = '$(NAME)_log',
                MAXSIZE = $(MAXSIZE),
                SIZE = $(SIZE),
                FILEGROWTH = $(FILEGROWTH)
              )
              GO
            GetQuery: |
              USE [master]
              GO
              SELECT * FROM sys.master_files
              WHERE type_desc = 'LOG'
              AND name = '$(NAME)_log'
              GO
            TestQuery: |
              USE [master]
              GO
              if(SELECT COUNT(database_id) FROM sys.master_files
              WHERE type_desc = 'LOG'
              AND name = '$(NAME)_log'
              AND size = 1024
              AND max_size = 268435456
              AND growth = 8192) = 0
              BEGIN
                PRINT 'Found default configuration'
              END
              ELSE
              BEGIN
                RAISERROR ('Default configuration has been modified', 16, 1)
              END
              GO
          loop: "{{ sql_databases }}"
          loop_control:
            loop_var: db

# setup.exe /q /IACCEPTSQLSERVERLICENSETERMS=YES /ProductKey=YOUR_LICENSE_KEY
# don't include line if arg doesn't exist
# https://github.com/automatesql/Ansible-for-SQL-Server-DBAs/blob/main/Simple-SQL-Server-Install/playbook_installSQLServer.yml
# https://github.com/bwInfoSec/ansible-role-windows-mssql/blob/main/tasks/main.yml
# https://www.sqlservercentral.com/articles/advanced-sql-server-installation-using-powershell-dsc
# https://learn.microsoft.com/en-us/sql/database-engine/install-windows/install-sql-server-with-powershell-desired-state-configuration?view=sql-server-ver16
